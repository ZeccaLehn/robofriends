{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","react_default","a","createElement","className","alt","src","concat","id","name","email","CardList","_ref","robots","cardComponent","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0LAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kGCiCSC,EAfF,SAACC,GACZ,OAECC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDAEdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAAMQ,GAAhC,mBACrBP,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,MACXR,EAAAC,EAAAC,cAAA,SAAIH,EAAMU,UClBAC,EAvBE,SAAAC,GAAc,IAAZC,EAAYD,EAAZC,OAEZC,EAAgBD,EAAOE,IAAI,SAACC,EAAMC,GAEvC,OAAQhB,EAAAC,EAAAC,cAACe,EAAD,CAAMC,IAAKF,EACnBT,GAAIK,EAAOI,GAAGT,GACdC,KAAMI,EAAOI,GAAGR,KAChBC,MAAOG,EAAOI,GAAGP,UAIlB,OAEAT,EAAAC,EAAAC,cAAA,WAEEW,ICJYM,EAZG,SAAAR,GAAiCA,EAA/BS,YAA+B,IAAlBC,EAAkBV,EAAlBU,aAChC,OACCrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACCC,UAAU,mCACVmB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCMCI,EAbA,SAAC1B,GAEf,OAECC,EAAAC,EAAAC,cAAA,OAAKwB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAEnE9B,EAAM+B,SAFR,MC8FaC,qBAzFd,SAAAA,IAAa,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAGZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAyBDI,eAAiB,SAACC,GAKjBR,EAAKS,SAAS,CAACrB,YAAaoB,EAAME,OAAOC,SA5BzCX,EAAKY,MAAM,CACVhC,OAAQ,GACRQ,YAAa,IAPFY,mFAeM,IAAAa,EAAAV,KAElBW,MAAM,8CACLC,KAAK,SAAAC,GAAc,OAAOA,EAASC,SACnCF,KAAK,SAAAG,GAAWL,EAAKJ,SAAS,CAAE7B,OAAQsC,uCAkBlC,IAAAC,EAIyBhB,KAAKS,MAA7BhC,EAJDuC,EAICvC,OAAQQ,EAJT+B,EAIS/B,YAIVgC,EAAiBxC,EAAOyC,OAAO,SAAAC,GACpC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASpC,EAAYmC,iBAWtD,OAAI3C,EAAO6C,OAUVzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACwD,EAAD,CAAWrC,aAAcc,KAAKI,iBAE9BvC,EAAAC,EAAAC,cAACyD,EAAD,KAEC3D,EAAAC,EAAAC,cAAC0D,EAAD,CAAUhD,OAAQwC,MAfbpD,EAAAC,EAAAC,cAAA,gCA7DQ2D,cCElBC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MACfC,SAASC,eAAe,SNsHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.00e7cefb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\n// Note only allows for one component\r\n\t// Classname bg-light-green dib br3 pa3 ma2 grow\r\n\t// background\r\n\t// dib?\r\n\t// br3: background\r\n\t// pa3: padding \r\n\t// ma: margin\r\n\t// grow: animation\r\n\t// bw2: shadow\r\n\t// shadow-5: shadow\r\n\r\n\t// Original:\r\n\r\n\t// const Card = () => {\r\n\t// \treturn (\r\n\r\n\t// \t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n\t// \t\t\t<img alt='robots' src='https://robohash.org/test?200x200'/>\r\n\t// \t\t\t<div>\r\n\t// \t\t\t\t<h2>Jane Doe</h2>\r\n\t// \t\t\t\t<p>jane.doe@email.com</p>\r\n\t// \t\t\t</div>\r\n\r\n\t// \t\t</div>\r\n\t// \t\t);\r\n\t// };\r\n\r\n\t// export default Card;\r\n\r\n// With Props imported from index.js\r\n// Wrapped in JS expression {}\r\n// props.id requires tilde backtick and curly braces around src\r\n\r\nconst Card = (props) => {\r\n\t\treturn (\r\n\r\n\t\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\r\n\t\t\t\t<img alt='robots' src={`https://robohash.org/${props.id}?size=200x200`} />\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t\t<p>{props.email}</p>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card.js'\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n\tconst cardComponent = robots.map((user, i) => {\r\n\t\t\r\n\t\treturn \t<Card key={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email} />\r\n\r\n\t\t});\r\n\r\n\treturn (\r\n\r\n\t<div>\r\n\t\r\n\t\t{cardComponent}\r\n\r\n\t</div>\r\n\r\n\t);\r\n\r\n};\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots' \r\n\t\t\t\tonChange={searchChange}/>\r\n \t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\r\n\treturn (\r\n\r\n\t\t<div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}} > \r\n\r\n\t\t\t{props.children};\r\n\r\n\t\t</div>\r\n\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component }  from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport './App.css';\r\n\r\n\r\n// Note: Component is from React.Component imported above\r\nclass App extends Component {\r\n\r\n\t// State defined here\r\n\tconstructor(){\r\n\r\n\t\t// Super calls constructor\r\n\t\tsuper()\r\n\t\t// State can change and effect parent\r\n\t\tthis.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t};\r\n\t};\r\n\r\n\r\n\t// Pulls in the robots from this API\r\n\t// https://jsonplaceholder.typicode.com/users\r\n\r\n\tcomponentDidMount(){\r\n\t\t// console.log('check');\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => { return response.json()})\r\n\t\t.then(users => { this.setState({ robots: users })});\r\n\r\n\t\t// To test loading remove this.setState... above\r\n\t\t// .then(users => { });\r\n\r\n\r\n\t\t}\r\n\r\n\t// \"= (event) =>\" Allows to use 'this' in method\r\n\tonSearchChange = (event) => {\r\n\r\n\t\t// console.log( this.state.robots);\r\n\r\n\t\t// To update state for filtering\r\n\t\tthis.setState({searchfield: event.target.value }) \r\n\t\t\r\n\t};\r\n\r\n\trender(){\r\n\r\n\t\t// Destructuring allows for this.state to be passed as object\r\n\r\n\t\tconst { robots, searchfield } = this.state\r\n\r\n\t\t// Communicate event to filter Cards\r\n\t\t// Note that filtered robot self mae constructor doesn't use this\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\r\n\t\t});\r\n\r\n\t\t// event.target.value returns event value\r\n\t\t// Each letter typed consoled\r\n\t\t// console.log(filteredRobots);\t\r\n\r\n\t\t// If database has many objects, we can speed\r\n\t\t// it up with an ifelse using this state\r\n\t\t// If no robots, show loading screen\r\n\t\tif(!robots.length){\r\n\t\t\treturn <h1> Loading...</h1>\r\n\t\t} else {\r\n\r\n\t\treturn(\r\n\r\n\t\t\t// Centers search box\r\n\t\t\t// Cardlist needs to know which robots are active to search\r\n\t\t\t// See Scroll.js for `props.children` rendering\r\n\t\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\r\n\t\t\t\t<Scroll>\r\n\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\r\n\t\t\t\t</Scroll>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t\t\r\n\r\n\t\t\t);\r\n\r\n\t\t};\r\n\r\n\t};\r\n\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App.js'\n\n\n// Creates first robot card \n// Wrap in div for multiple cards\nReactDOM.render(<App />, \n\tdocument.getElementById('root'));\n\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}